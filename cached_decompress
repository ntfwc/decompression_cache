#!/usr/bin/python

#Copyright (C) 2014 ntfwc

#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.

from argparse import ArgumentParser
from ConfigParser import RawConfigParser

import os.path
from os import mkdir

HOME_LOCATION = os.path.expanduser("~")
DEFAULT_CACHE_LOCATION = os.path.join(HOME_LOCATION, ".cache/decompression_cache")
DEFAULT_MAX_SIZE = "1G"

CONFIG_SECTION="Configs"

def __writeConfigFile(configFile, configParser):
	with open(configFile, "w") as f:
		configParser.write(f)

def __initConfig(configFile):
	configParser = RawConfigParser()
	configParser.add_section(CONFIG_SECTION)
	configParser.set(CONFIG_SECTION, "max_cache_size", DEFAULT_MAX_SIZE)
	
	__writeConfigFile(configFile, configParser)

def __parseConfigFile(configFile, configParser):
	with open(configFile, "r") as f:
		configParser.readfp(f)

def __readConfig(configFile):
	configParser = RawConfigParser()
	__parseConfigFile(configFile, configParser)
	global DEFAULT_MAX_SIZE
	DEFAULT_MAX_SIZE = configParser.get(CONFIG_SECTION, "max_cache_size")

def __readInOrInitConfig(configFile):
	if not os.path.exists(configFile):
		__initConfig(configFile)
	else:
		__readConfig(configFile)

def __setUpParser():
	parser = ArgumentParser(prog="cached_decompress", description='Cached file decompressor. Returns the path to the decompressed content.')
	parser.add_argument("archiveFile", type=str, help="An archive file (.tar.gz, .tar.xz, .zip, .gz, .xz)")
	parser.add_argument("-l", "--cache_location", default=DEFAULT_CACHE_LOCATION, help="Set the location of the cache folder to use.")
	parser.add_argument("-m", "--max_size", default=DEFAULT_MAX_SIZE, help="Set the target max size of the cache.")
	return parser

def __parseArgs(args):
	parser = __setUpParser()
	return parser.parse_args(args)

def __parseMaxSize(maxSizeArg):
	if maxSizeArg.endswith("GB"):
		return int(float(maxSizeArg[:-2])*1000**3)
	elif maxSizeArg.endswith("G"):
		return int(float(maxSizeArg[:-1])*1024**3)
	elif maxSizeArg.endswith("MB"):
		return int(float(maxSizeArg[:-2])*1000**2)
	elif maxSizeArg.endswith("M"):
		return int(float(maxSizeArg[:-1])*1024**2)
	elif maxSizeArg.endswith("kB"):
		return int(float(maxSizeArg[:-2])*1000)
	elif maxSizeArg.endswith("K"):
		return int(float(maxSizeArg[:-1])*1024)
	elif maxSizeArg.endswith("B"):
		return int(maxSizeArg[:-1])
	else:
		return int(maxSizeArg)

def __makeSureDefaultCacheLocationExists():
	if not os.path.exists(DEFAULT_CACHE_LOCATION):
		mkdir(DEFAULT_CACHE_LOCATION)

from lib.Cache import Cache
from lib.filehash.ShallowFileHashing import getShallowMD5Hash

CONFIG_LOCATION=os.path.join(HOME_LOCATION, ".config/decompression_cache.conf")

def main(args):
	__readInOrInitConfig(CONFIG_LOCATION)
	parsedArguments = __parseArgs(args)
	archiveFile = parsedArguments.archiveFile
	cacheLocation = parsedArguments.cache_location
	try:
		maxSize = __parseMaxSize(parsedArguments.max_size)
	except:
		print "Please give a valid max size (e.g. 1G, 1GB, 200M, 500KB)"
		return
	
	if cacheLocation == DEFAULT_CACHE_LOCATION:
		__makeSureDefaultCacheLocationExists()
	
	cache = Cache(cacheLocation, maxSize)
	hexHash = getShallowMD5Hash(archiveFile).encode("hex")
	print cache.recallOrCreateEntryAndGetContentPath(hexHash, archiveFile)

from sys import argv
if __name__ == "__main__":
    main(argv[1:])
